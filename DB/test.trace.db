2017-04-01 15:38:44 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE DATABASE[*] CUSTOMER( ID INT NOT NULL , NAME VARCHAR(255), EMAIL VARCHAR(255) ); "; expected "OR, FORCE, VIEW, ALIAS, SEQUENCE, USER, TRIGGER, ROLE, SCHEMA, CONSTANT, DOMAIN, TYPE, DATATYPE, AGGREGATE, LINKED, MEMORY, CACHED, LOCAL, GLOBAL, TEMP, TEMPORARY, TABLE, PRIMARY, UNIQUE, HASH, SPATIAL, INDEX"; SQL statement:
create database customer( id INT not NULL , name VARCHAR(255), email varchar(255) ); [42001-192]
2017-04-01 15:40:31 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE DATABASE[*] CUSTOMER( ID INT , NAME VARCHAR(255), EMAIL VARCHAR(255) ); "; expected "OR, FORCE, VIEW, ALIAS, SEQUENCE, USER, TRIGGER, ROLE, SCHEMA, CONSTANT, DOMAIN, TYPE, DATATYPE, AGGREGATE, LINKED, MEMORY, CACHED, LOCAL, GLOBAL, TEMP, TEMPORARY, TABLE, PRIMARY, UNIQUE, HASH, SPATIAL, INDEX"; SQL statement:
create database customer( id INT , name VARCHAR(255), email varchar(255) ); [42001-192]
2017-04-01 15:41:24 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "DROP DATABASE[*] IF EXISTS CUSTOMER; "; expected "TABLE, INDEX, USER, SEQUENCE, CONSTANT, TRIGGER, VIEW, ROLE, ALIAS, SCHEMA, ALL, DOMAIN, TYPE, DATATYPE, AGGREGATE"; SQL statement:
DROP database if exists customer; [42001-192]
2017-04-01 15:45:53 jdbc[13]: exception
org.h2.jdbc.JdbcSQLException: Column "DATE" not found; SQL statement:
SELECT DATE  [42122-192]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:147)
	at org.h2.command.dml.Select.prepare(Select.java:852)
	at org.h2.command.Parser.prepareCommand(Parser.java:259)
	at org.h2.engine.Session.prepareLocal(Session.java:560)
	at org.h2.engine.Session.prepareCommand(Session.java:501)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1202)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:170)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:158)
	at org.springframework.jdbc.core.JdbcTemplate$1ExecuteStatementCallback.doInStatement(JdbcTemplate.java:435)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:408)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:443)
	at com.basic.runner.ApplicationSeed.readSchemaFromFile(ApplicationSeed.java:41)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:366)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:311)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:134)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:409)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542)
	at org.springframework.context.annotation.AnnotationConfigApplicationContext.<init>(AnnotationConfigApplicationContext.java:84)
	at com.basic.Application.main(Application.java:16)
2017-04-01 15:46:24 jdbc[16]: exception
org.h2.jdbc.JdbcSQLException: Table "CUSTOMER" already exists; SQL statement:
create table customer(name VARCHAR ,id INT ) [42101-192]
2017-04-01 15:46:43 jdbc[17]: exception
org.h2.jdbc.JdbcSQLException: Table "CUSTOMER" already exists; SQL statement:
create table customer(name VARCHAR ,ID INT ) [42101-192]
2017-04-01 15:46:52 jdbc[18]: exception
org.h2.jdbc.JdbcSQLException: Table "CUSTOMER" already exists; SQL statement:
create table customer(name VARCHAR ,id NUMBER ) [42101-192]
2017-04-01 15:46:56 jdbc[19]: exception
org.h2.jdbc.JdbcSQLException: Table "CUSTOMER" already exists; SQL statement:
create table customer(name VARCHAR ,id VARCHAR ) [42101-192]
2017-04-01 15:47:11 jdbc[20]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "DROP DATABASE[*] CUSTOMER "; expected "TABLE, INDEX, USER, SEQUENCE, CONSTANT, TRIGGER, VIEW, ROLE, ALIAS, SCHEMA, ALL, DOMAIN, TYPE, DATATYPE, AGGREGATE"; SQL statement:
drop database customer [42001-192]
2017-04-01 15:47:20 jdbc[21]: exception
org.h2.jdbc.JdbcSQLException: Schema "TEST" not found; SQL statement:
use test [90079-192]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.engine.Database.getSchema(Database.java:1744)
	at org.h2.command.dml.Set.update(Set.java:408)
	at org.h2.command.CommandContainer.update(CommandContainer.java:98)
	at org.h2.command.Command.executeUpdate(Command.java:258)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:184)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:158)
	at org.springframework.jdbc.core.JdbcTemplate$1ExecuteStatementCallback.doInStatement(JdbcTemplate.java:435)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:408)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:443)
	at com.basic.runner.ApplicationSeed.readSchemaFromFile(ApplicationSeed.java:41)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:366)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:311)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:134)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:409)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542)
	at org.springframework.context.annotation.AnnotationConfigApplicationContext.<init>(AnnotationConfigApplicationContext.java:84)
	at com.basic.Application.main(Application.java:16)
2017-04-01 15:47:26 jdbc[22]: exception
org.h2.jdbc.JdbcSQLException: Schema "CUSTOMER" not found; SQL statement:
use customer [90079-192]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.engine.Database.getSchema(Database.java:1744)
	at org.h2.command.dml.Set.update(Set.java:408)
	at org.h2.command.CommandContainer.update(CommandContainer.java:98)
	at org.h2.command.Command.executeUpdate(Command.java:258)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:184)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:158)
	at org.springframework.jdbc.core.JdbcTemplate$1ExecuteStatementCallback.doInStatement(JdbcTemplate.java:435)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:408)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:443)
	at com.basic.runner.ApplicationSeed.readSchemaFromFile(ApplicationSeed.java:41)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:366)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:311)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:134)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:409)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542)
	at org.springframework.context.annotation.AnnotationConfigApplicationContext.<init>(AnnotationConfigApplicationContext.java:84)
	at com.basic.Application.main(Application.java:16)
2017-04-01 15:47:59 jdbc[24]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE DATABASE[*] CUSTOMER(ID INT,NAME VARCHAR) "; expected "OR, FORCE, VIEW, ALIAS, SEQUENCE, USER, TRIGGER, ROLE, SCHEMA, CONSTANT, DOMAIN, TYPE, DATATYPE, AGGREGATE, LINKED, MEMORY, CACHED, LOCAL, GLOBAL, TEMP, TEMPORARY, TABLE, PRIMARY, UNIQUE, HASH, SPATIAL, INDEX"; SQL statement:
create database customer(id int,name varchar) [42001-192]
2017-04-01 15:48:15 jdbc[25]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE DATABASE[*] CUSTOMER(ID INT,NAME VARCHAR) "; expected "OR, FORCE, VIEW, ALIAS, SEQUENCE, USER, TRIGGER, ROLE, SCHEMA, CONSTANT, DOMAIN, TYPE, DATATYPE, AGGREGATE, LINKED, MEMORY, CACHED, LOCAL, GLOBAL, TEMP, TEMPORARY, TABLE, PRIMARY, UNIQUE, HASH, SPATIAL, INDEX"; SQL statement:
create database customer(ID int,name varchar) [42001-192]
2017-04-01 15:48:24 jdbc[26]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE DATABASE[*] CUSTOMER(ID VARCHAR ,NAME VARCHAR ) "; expected "OR, FORCE, VIEW, ALIAS, SEQUENCE, USER, TRIGGER, ROLE, SCHEMA, CONSTANT, DOMAIN, TYPE, DATATYPE, AGGREGATE, LINKED, MEMORY, CACHED, LOCAL, GLOBAL, TEMP, TEMPORARY, TABLE, PRIMARY, UNIQUE, HASH, SPATIAL, INDEX"; SQL statement:
create database customer(ID VARCHAR ,name VARCHAR ) [42001-192]
2017-04-01 15:48:32 jdbc[27]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE DATABASE[*] CUSTOMER(NAME VARCHAR ) "; expected "OR, FORCE, VIEW, ALIAS, SEQUENCE, USER, TRIGGER, ROLE, SCHEMA, CONSTANT, DOMAIN, TYPE, DATATYPE, AGGREGATE, LINKED, MEMORY, CACHED, LOCAL, GLOBAL, TEMP, TEMPORARY, TABLE, PRIMARY, UNIQUE, HASH, SPATIAL, INDEX"; SQL statement:
create database customer(name VARCHAR ) [42001-192]
2017-04-01 15:48:42 jdbc[28]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE DATABASE[*] CUSTOMERS(NAME VARCHAR) "; expected "OR, FORCE, VIEW, ALIAS, SEQUENCE, USER, TRIGGER, ROLE, SCHEMA, CONSTANT, DOMAIN, TYPE, DATATYPE, AGGREGATE, LINKED, MEMORY, CACHED, LOCAL, GLOBAL, TEMP, TEMPORARY, TABLE, PRIMARY, UNIQUE, HASH, SPATIAL, INDEX"; SQL statement:
create database customers(name VARCHAR) [42001-192]
2017-04-01 15:48:50 jdbc[29]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE DATABASE[*] CUSTOMERS(NAME VARCHAR); "; expected "OR, FORCE, VIEW, ALIAS, SEQUENCE, USER, TRIGGER, ROLE, SCHEMA, CONSTANT, DOMAIN, TYPE, DATATYPE, AGGREGATE, LINKED, MEMORY, CACHED, LOCAL, GLOBAL, TEMP, TEMPORARY, TABLE, PRIMARY, UNIQUE, HASH, SPATIAL, INDEX"; SQL statement:
create database customers(name VARCHAR); [42001-192]
2017-04-01 15:49:09 jdbc[30]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "CREATE DATABASE[*] CUSTOMERS(NAME VARCHAR); "; expected "OR, FORCE, VIEW, ALIAS, SEQUENCE, USER, TRIGGER, ROLE, SCHEMA, CONSTANT, DOMAIN, TYPE, DATATYPE, AGGREGATE, LINKED, MEMORY, CACHED, LOCAL, GLOBAL, TEMP, TEMPORARY, TABLE, PRIMARY, UNIQUE, HASH, SPATIAL, INDEX"; SQL statement:
create database customers(name VARCHAR); [42001-192]
2017-04-01 15:49:52 jdbc[35]: exception
org.h2.jdbc.JdbcSQLException: Schema "TEST" not found; SQL statement:
use test [90079-192]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.engine.Database.getSchema(Database.java:1744)
	at org.h2.command.dml.Set.update(Set.java:408)
	at org.h2.command.CommandContainer.update(CommandContainer.java:98)
	at org.h2.command.Command.executeUpdate(Command.java:258)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:184)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:158)
	at org.springframework.jdbc.core.JdbcTemplate$1ExecuteStatementCallback.doInStatement(JdbcTemplate.java:435)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:408)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:443)
	at com.basic.runner.ApplicationSeed.readSchemaFromFile(ApplicationSeed.java:41)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:366)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:311)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:134)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:409)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542)
	at org.springframework.context.annotation.AnnotationConfigApplicationContext.<init>(AnnotationConfigApplicationContext.java:84)
	at com.basic.Application.main(Application.java:16)
2017-04-01 15:50:05 jdbc[36]: exception
org.h2.jdbc.JdbcSQLException: Table "CUSTOMER" already exists; SQL statement:
create TABLE customer(id int,name VARCHAR ) [42101-192]
2017-04-01 15:50:18 jdbc[37]: exception
org.h2.jdbc.JdbcSQLException: Table "CUSTOMER" already exists; SQL statement:
create TABLE customer(name VARCHAR ) [42101-192]
2017-04-01 15:50:25 jdbc[38]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "DROP DATABASE[*] IF EXISTS CUSTOMER; "; expected "TABLE, INDEX, USER, SEQUENCE, CONSTANT, TRIGGER, VIEW, ROLE, ALIAS, SCHEMA, ALL, DOMAIN, TYPE, DATATYPE, AGGREGATE"; SQL statement:
DROP database if exists customer; [42001-192]
2017-04-01 16:01:10 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "INSERT INTO CUSTOMER (ID,NAME,EMAIL)VALUE[*] (:ID,:NAME,:EMAIL) "; expected "DIRECT, SORTED, DEFAULT, VALUES, SET, (, SELECT, FROM"; SQL statement:
INSERT INTO customer (id,name,email)VALUE (:id,:name,:email) [42001-192]
2017-04-01 16:02:31 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "INSERT INTO CUSTOMER (ID,NAME,EMAIL) VALUE[*] (?,?,?) "; expected "DIRECT, SORTED, DEFAULT, VALUES, SET, (, SELECT, FROM"; SQL statement:
INSERT INTO customer (id,name,email) VALUE (?,?,?) [42001-192]
2017-04-01 16:04:24 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "SELECT * FROM CUSTOMER WHEN ID[*] IS NOT NULL  "; SQL statement:
SELECT * from customer WHEN id is not NULL  [42000-192]
2017-04-01 16:05:07 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "INSERT INTO CUSTOMER (ID,NAME,EMAIL) VALUE[*] (?,?,?) "; expected "DIRECT, SORTED, DEFAULT, VALUES, SET, (, SELECT, FROM"; SQL statement:
INSERT INTO customer (id,name,email) VALUE (?,?,?) [42001-192]
2017-04-01 16:06:02 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "INSERT INTO CUSTOMER (ID,NAME,EMAIL) VALUE[*] (?,?,?) "; expected "DIRECT, SORTED, DEFAULT, VALUES, SET, (, SELECT, FROM"; SQL statement:
INSERT INTO customer (id,name,email) VALUE (?,?,?) [42001-192]
2017-04-01 16:07:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Numeric value out of range: "1242557205462840"; SQL statement:
INSERT INTO customer (id,name,email) VALUES (?,?,?) -- (?1, ?2, ?3) [22003-192]
